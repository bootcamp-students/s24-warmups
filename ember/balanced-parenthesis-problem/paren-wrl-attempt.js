/*
balancedParens(0) => [""]
balancedParens(1) => ["()"] // 1
balancedParens(2) => ["()()","(())"] // 2
balancedParens(3) => ["()()()", "(()())", "(())()","()(())","((()))"] // 5
balancedParens(4) => ["(((())))","((()()))","((())())","((()))()","(()(()))","(()()())","(()())()","(())(())","(())()()","()((()))","()(()())","()(())()","()()(())","()()()()"] // 14
*/

/*
// go wide
// wrap prev go wide with paren (so last loop[0] becomes now[1])
// loop[1:] now becomes wrap, right, left

// [ //3
// 0: "()()()", // wide
// 1: "(()())",  // wrap prev wide 2[0]
// 2: "((()))"   2[1]  w
// 3: "(())()",  2[1]  r
// 4: "()(())",  2[1]  l
// ]

// [ // 4
//  "()()()()", // wide
//  "(()()())", // wrap prev wide 3[0]
//  "((()()))", "(()())()", "()(()())", 3[1] w, r, l
//  "(((())))", "((()))()", "()((()))", 3[2] w, r, l
//  "((())())", "(())()()", "()(())()", 3[3] w, r, l
//  "(()(()))",           , "()()(())", 3[4] w,  , l
//  "(())(())" // ???
 */

function balancedParens(n) {
    if (n === 0) return ['']
    console.log({ n })
    return loop(n);
}

function loop(n) {
    let output = [wide(n)]

    if (n > 1) {
        let recur = loop(n - 1);
        console.log({ recur });

        let wrapPrevWide = wrap(recur[0]);
        output.push(wrapPrevWide);

        recur.slice(1).forEach(x => {
            output.push(wrap(x));
            output.push(addRight(x));
            output.push(addLeft(x));
        })

        if (n % 2 === 0) {
            let parenDeep = deep(n / 2);
            output.push(parenDeep + parenDeep)
        }

        output = [...new Set(output)]
        console.log({ output, length: output.length })
    }

    return output;
}

function wide(n) {
    return '()'.repeat(n)
}

function wrap(str) {
    return `(${str})`
}

function addRight(str) {
    return str + '()'
}

function addLeft(str) {
    return '()' + str
}

function deep(n) {
    return '('.repeat(n) + ')'.repeat(n)
}

// Expected: len 42

// instead got:

